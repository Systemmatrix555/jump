jump -- navigate faster by learning your habits
===============================================

## SYNOPSIS

**j** [term ...]

## DESCRIPTION

**Jump** integrates with the shell and learns about your navigational habits by
keeping track of the directories you visit. It strives to give you the best
directory for the shortest search term.

## USAGE

Jump needs to be integrated with the shell. For `bash` and `zsh`, the the line
below in needs to be in `~/.bashrc`, `~/bash_profile` or `~/.zshrc`:

    eval "$(jump shell)"

For fish shell, put the line below needs to be in `~/.config/fish/config.fish`:

    jump shell fish | source

For PowerShell add the following to your profile, located by typing `$PROFILE`:

    Invoke-Expression (&jump shell pwsh | Out-String)

Once integrated, **jump** will automatically directory changes and start
building an internal database.

### HELPER

Once integrated, **jump** introduces the **j** helper. Every argument to **j**
is treated as a search term. This is a design goal.

**Jump** uses fuzzy matching to find the desired directory to jump to. This
means that your search terms are patterns that match the desired directory
approximately rather than exactly. Typing **2** to **5** consecutive characters
of the base directory names is all that **jump** needs to find it.

### REGULAR JUMP

The default search behavior of **jump** is to case insensitively match only the
base directory path of the scored directories. This is because absolute paths
are long and short search terms can fuzzy match them easily, lead to bad
matches.

If you visit the directory `/Users/genadi/Development/rails/web-console` often,
you can jump to it by:

    $ j wc      # or...
    $ j webc    # or...
    $ j console # or...
    $ j b-c     # or...

Of course, `web-console` can be typed directly as a search term:

    $ j web-console
    $ pwd
    /Users/genadi/Development/rails/web-console

Using jump is all about saving key strokes. However, if you made the effort to
type a directory base name exactly, **jump** will try to find the exact match,
rather than fuzzy search.

### DEEP JUMP

Given the following directories:

    /Users/genadi/Development/society/website
    /Users/genadi/Development/chaos/website

Can you be sure where `j web` will lead you? You can hint jump where you want
to go.  To ensure a match of `/Users/genadi/Development/chaos/website`, use the
search term:

    $ j ch web
    $ pwd
    /Users/genadi/Development/chaos/website

This instructs **jump** to look for a `web` match inside that is preceded by a
`ch` match in the parent directory.  The search is normalized only on the last
two parts of the target paths. This will ensure a better match, because of the
shorter path to fuzzy match on.

There are no depth limitations though and a jump to
`/Users/genadi/Development/society/website` can look like:

    $ j dev soc web
    $ pwd
    /Users/genadi/Development/society/website

In fact, every space passed to `j` is converted to an OS separator. The search
term above can be expressed as:

    $ j dev/soc/web
    $ pwd
    /Users/genadi/Development/society/website

## REVERSE JUMP

Sometimes bad jumps happen. Maybe the search has a better scored directory
already. If we want to jump to `/Users/genadi/Development/hack/website` and we
have the following entries in the database:

    /Users/genadi/Development/society/website
    /Users/genadi/Development/chaos/website
    /Users/genadi/Development/hack/website

Typing `j web` would lead to:

    $ j web
    $ pwd
    /Users/genadi/Development/society/website

Instead of typing another search term, typing **j** without a search term will
instruct **jump** to the second best, third best and so on matches.

    $ j
    $ pwd
    /Users/genadi/Development/chaos/website

    $ j
    $ pwd
    /Users/genadi/Development/hack/website

### CASE SENSITIVE JUMP

To trigger a case-sensitive search, use a term that has a capital letter.

    $ j Dev
    $ pwd
    /Users/genadi/Development

The jump will resolve to `/Users/genadi/Development` even if there is
`/Users/genadi/Development/dev-tools` that scores better.

## PINS

For various reasons, Jump may not always find the directory you want, but don't
worryâ€”you can make it work!

A pin forces an input to always go to a specific location. If you want `j r` to
always go to `/Users/genadi/development/rails`, you can do:

    $ cd /Users/genadi/development/rails
    $ jump pin r
    $ cd
    $ j r # Skips the scoring and goes straight to the pinned directory.
    $ pwd
    /Users/genadi/development/rails

Notice the `jump` command instead of the `j` shell function helper. `j` will
always treat its input as search terms. It may apply some heuristics to how the
input looks, but it will never accept arguments or switches. Here is where the
`jump` command comes in. It is bundled with lots of helpers to make your `j`
life easier. The pins are one of them.

## COMMANDS

### jump clean

Cleans the database of non-existent entries. Removes all database entries pointing to directories that have been deleted from your filesystem.

    $ jump clean

### jump forget [path]

Removes the current directory (or specified path) from the database. Useful when you're in a directory you don't want Jump to remember or suggest in the future.

    $ jump forget
    $ jump forget /path/to/directory

### jump top [term] [--score]

Lists the directories as they are scored, sorted by their calculated scores (highest first). Optionally filter with a search term or show numeric scores.

    $ jump top
    $ jump top dev
    $ jump top --score

### jump pin <term>

Pin a directory to a search term. The current directory will be permanently attached to the specified term.

    $ jump pin r

### jump pins

Lists all the pinned search terms in tab-separated format.

    $ jump pins

### jump unpin <term>

Unpin a search term, removing it from the pinned database.

    $ jump unpin r

### jump import [autojump|z]

Import autojump or z scores. Without arguments, tries z first, then autojump.

    $ jump import
    $ jump import autojump
    $ jump import z

### jump shell [shell] [--bind=<shortcut>]

Display a shell integration script. Optionally specify shell type and key binding.

    $ jump shell
    $ jump shell bash
    $ jump shell --bind=z

### jump cd <term>

Fuzzy match a directory to jump to. This is the core command that `j` calls under the hood.

    $ jump cd web

### jump hint <term>

Hints relevant paths for jumping. Used internally for shell completion.

    $ jump hint we

## JUMP SETTINGS

Jump is opinionated and we would recommend you to stick to the sweet hand-tuned
defaults we have provided after years of research, however, we provide a few
options that may be useful to hand-tune yourself:

### --space (values: slash (default), ignore)

The calls "j parent child" and "j parent/child" are equivalent by
default because spaces are treated as OS separators (/ in Unix). You
can choose to ignore spaces in searches by setting the "spaces" option
to "ignore":

    jump settings --space=ignore

### --preserve (values: false (default), true)

By default, landing in a directory that is no-longer available on disk
will cause jump to remove that directory from its database. If a jump
lands in unmounted drive, the changing of directory will timeout. This
is why this is turned off (false) by default.

    jump settings --preserve=true

### --reset

Reset jump settings to their default values.

    jump settings --reset

## COPYRIGHT

The MIT License (MIT)

Copyright (c) 2015-2025 Genadi Samokovarov

## SEE ALSO

autojump(1), z(1), pushd(1), popd(1)
